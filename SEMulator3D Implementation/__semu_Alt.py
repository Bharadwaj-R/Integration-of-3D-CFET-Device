#! python 
# -*- coding: utf-8 -*-
# 

# Autogenerated by Coventor SEMulator3D on 12/1/2024, 22:21:2
# SEMulator3D 

# Using model file:        D:\IISc Bangalore\Semester - I\NE 303 - Semiconductor Process Integration\Project\SEMulator3D_Implementation\Alt\Alt.zam
# Using process file:      D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/Alt.vproc
# Using analysis file:     D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input
# Using material file:     D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/SEMulator3DMaterialsDatabase12.vmpd
# Using layout file:       D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/CFET_Mask.gds

# ============================================================== 
# Command line arguments
import sys
import getopt
from voxelDocument import MonitorKillFile

opts, args = getopt.getopt(sys.argv[1:], '', ["fpw=","mpw=","spw=","encrypted","killFile="])

fpw, mpw, spw = '', '', ''
encrypted = False
for opt, arg in opts:
   if opt == "--fpw":
      fpw = arg
   elif opt == "--mpw":
      mpw = arg
   elif opt == "--spw":
      spw = arg
   elif opt == "--encrypted":
      encrypted = True
   elif opt == "--killFile":
      MonitorKillFile(arg)
# ============================================================== 
# Choose our python API version
_SEMulator3D_API_VERSION = '12.0'

# ============================================================== 
# Import Python built-in modules
import math
import time
import traceback
import logging

# Import SEMulator3D modules
from voxelModeler import *

# Initialize MPI
from CModeler import mpiInitialize
from CModeler import mpiFinalize
from subprocess import Popen
import sys
mpiInitialize(len(sys.argv), sys.argv)
# Logging
_log = logging.getLogger("cov.modelBuilding")
startTime = time.time()

#============================================================== 
# Setup Masks 
layoutFile = 'D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/CFET_Mask.gds'
layoutTopCell = 'Mask'

# GDS layer map info
layerMap = {}
layerMap['Gate'] = (3, 0)
layerMap['Patterning'] = (7, 0)
layerMap['SD'] = (5, 0)
layerMap['STI'] = (1, 0)
layerMap['Spacers'] = (4, 0)
layerMap['Stack'] = (2, 0)
layerMap['Substrate'] = (0, 0)
layerMap['Support'] = (6, 0)


#============================================================== 
# Setup Modeler and Documents
modelResolution = 1
modelUnits = 'nm'

voxDoc = VoxelDocument('D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt.zam', modelResolution, modelUnits, LOAD)

modeler = VoxelModeler(voxDoc)

# Active masks in the process
activeLayoutMaskNames = ('Gate', 'Patterning', 'SD', 'STI', 'Stack', 'Substrate', 'Support', )
maskFile = MaskFile(layoutFile, layoutTopCell)

modeler.SetDefaultMaskUnitsPerMicron(maskFile.GetUnitsPerMicron())

for maskName in activeLayoutMaskNames:
    if maskName in layerMap.keys():
        mask = maskFile.GetLayerWithDataType(layerMap[maskName][0], layerMap[maskName][1])
        mask.SetName(maskName)
        modeler.AddActiveMask(mask)

# Fix build boundary based on current masks.
modeler.CacheBuildBoundary()


#============================================================== 
# Load Process 
procDoc = CProcessData.ProcessDocument()
procDoc.openWithPasswords('D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/Alt.vproc', fpw, mpw, encrypted)

#============================================================== 
# Load Analysis 
analysisDoc = None

#============================================================== 
# Setup Materials and Dopants
matDoc = CMaterialData.MaterialDocument()
matDoc.openWithPasswords('D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt-Input/SEMulator3DMaterialsDatabase12.vmpd', fpw, mpw, encrypted)
for mat in matDoc.getActiveMaterialsInProcess(procDoc):
    voxDoc.GetMaterials().Add(mat, DUP_ADD_ALLOW)

for dopant in matDoc.getActiveDopantsInProcess(procDoc):
    voxDoc.GetDopants().Add(dopant, DUP_ADD_ALLOW)

if analysisDoc:
    for mat in matDoc.getActiveMaterialsInProcess(analysisDoc):
        voxDoc.GetMaterials().Add(mat, DUP_ADD_ALLOW)
    
    for dopant in matDoc.getActiveDopantsInProcess(analysisDoc):
        voxDoc.GetDopants().Add(dopant, DUP_ADD_ALLOW)

success = voxDoc.GetProperties().IsModelBuildComplete() #True

#============================================================== 
# Build Model
success = modeler.BuildModel(procDoc, analysisDoc, spw)

#============================================================== 
# Save Model Build
if not voxDoc.IsOutputEnabled():
    modeler.SaveFinalStep()

voxDoc.GetProperties().SetModelBuildComplete(success)
voxDoc.Save()

endTime = time.time()
_log.info('Build process completed.')
_log.info('Elapsed Time %d seconds.', (endTime-startTime))
mpiFinalize()

if voxDoc.GetProperties().GetStartViewer():
    Popen(['SEMulator3DViewer','D:/IISc Bangalore/Semester - I/NE 303 - Semiconductor Process Integration/Project/SEMulator3D_Implementation/Alt/Alt.zam'], env=os.environ)

if not success:
    # Though the build terminated cleanly, it was not considered successful.
    sys.exit(1)

